# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from imm_server.models.base_model_ import Model
from imm_server import util


class FeatureDataIn(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, value: int=None, units: str=None, time: datetime=None, device: str=None):  # noqa: E501
        """FeatureDataIn - a model defined in Swagger

        :param value: The value of this FeatureDataIn.  # noqa: E501
        :type value: int
        :param units: The units of this FeatureDataIn.  # noqa: E501
        :type units: str
        :param time: The time of this FeatureDataIn.  # noqa: E501
        :type time: datetime
        :param device: The device of this FeatureDataIn.  # noqa: E501
        :type device: str
        """
        self.swagger_types = {
            'value': int,
            'units': str,
            'time': datetime,
            'device': str
        }

        self.attribute_map = {
            'value': 'value',
            'units': 'units',
            'time': 'time',
            'device': 'device'
        }
        self._value = value
        self._units = units
        self._time = time
        self._device = device

    @classmethod
    def from_dict(cls, dikt) -> 'FeatureDataIn':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The feature_data_in of this FeatureDataIn.  # noqa: E501
        :rtype: FeatureDataIn
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self) -> int:
        """Gets the value of this FeatureDataIn.


        :return: The value of this FeatureDataIn.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value: int):
        """Sets the value of this FeatureDataIn.


        :param value: The value of this FeatureDataIn.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def units(self) -> str:
        """Gets the units of this FeatureDataIn.


        :return: The units of this FeatureDataIn.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units: str):
        """Sets the units of this FeatureDataIn.


        :param units: The units of this FeatureDataIn.
        :type units: str
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")  # noqa: E501

        self._units = units

    @property
    def time(self) -> datetime:
        """Gets the time of this FeatureDataIn.

        Time of sample results for Lab, or measurement time for other.  # noqa: E501

        :return: The time of this FeatureDataIn.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time: datetime):
        """Sets the time of this FeatureDataIn.

        Time of sample results for Lab, or measurement time for other.  # noqa: E501

        :param time: The time of this FeatureDataIn.
        :type time: datetime
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def device(self) -> str:
        """Gets the device of this FeatureDataIn.

        Description of device used to collect an specific lab. (e.g. roche_cobas)  # noqa: E501

        :return: The device of this FeatureDataIn.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device: str):
        """Sets the device of this FeatureDataIn.

        Description of device used to collect an specific lab. (e.g. roche_cobas)  # noqa: E501

        :param device: The device of this FeatureDataIn.
        :type device: str
        """

        self._device = device
