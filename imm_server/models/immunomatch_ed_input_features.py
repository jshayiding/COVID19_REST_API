# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from imm_server.models.base_model_ import Model
from imm_server.models.feature_data_in import FeatureDataIn  # noqa: F401,E501
from imm_server import util


class ImmunomatchEdInputFeatures(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, age: int=None, gender: str=None, systolicbp: FeatureDataIn=None, diastolicbp: FeatureDataIn=None, heartrate: FeatureDataIn=None, pulseoximetry: FeatureDataIn=None, respiratoryrate: FeatureDataIn=None, temperature: FeatureDataIn=None, monocyte: FeatureDataIn=None, neutrophil: FeatureDataIn=None, wbc: FeatureDataIn=None, platelets: FeatureDataIn=None, albumin: FeatureDataIn=None, bilirubin: FeatureDataIn=None, bun: FeatureDataIn=None, creatinine: FeatureDataIn=None, glucose: FeatureDataIn=None, potassium: FeatureDataIn=None, sodium: FeatureDataIn=None, lactate: FeatureDataIn=None, gcstotal: FeatureDataIn=None, pct: FeatureDataIn=None, il6: FeatureDataIn=None, crp: FeatureDataIn=None):  # noqa: E501
        """ImmunomatchEdInputFeatures - a model defined in Swagger

        :param age: The age of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type age: int
        :param gender: The gender of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type gender: str
        :param systolicbp: The systolicbp of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type systolicbp: FeatureDataIn
        :param diastolicbp: The diastolicbp of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type diastolicbp: FeatureDataIn
        :param heartrate: The heartrate of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type heartrate: FeatureDataIn
        :param pulseoximetry: The pulseoximetry of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type pulseoximetry: FeatureDataIn
        :param respiratoryrate: The respiratoryrate of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type respiratoryrate: FeatureDataIn
        :param temperature: The temperature of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type temperature: FeatureDataIn
        :param monocyte: The monocyte of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type monocyte: FeatureDataIn
        :param neutrophil: The neutrophil of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type neutrophil: FeatureDataIn
        :param wbc: The wbc of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type wbc: FeatureDataIn
        :param platelets: The platelets of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type platelets: FeatureDataIn
        :param albumin: The albumin of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type albumin: FeatureDataIn
        :param bilirubin: The bilirubin of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type bilirubin: FeatureDataIn
        :param bun: The bun of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type bun: FeatureDataIn
        :param creatinine: The creatinine of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type creatinine: FeatureDataIn
        :param glucose: The glucose of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type glucose: FeatureDataIn
        :param potassium: The potassium of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type potassium: FeatureDataIn
        :param sodium: The sodium of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type sodium: FeatureDataIn
        :param lactate: The lactate of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type lactate: FeatureDataIn
        :param gcstotal: The gcstotal of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type gcstotal: FeatureDataIn
        :param pct: The pct of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type pct: FeatureDataIn
        :param il6: The il6 of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type il6: FeatureDataIn
        :param crp: The crp of this ImmunomatchEdInputFeatures.  # noqa: E501
        :type crp: FeatureDataIn
        """
        self.swagger_types = {
            'age': int,
            'gender': str,
            'systolicbp': FeatureDataIn,
            'diastolicbp': FeatureDataIn,
            'heartrate': FeatureDataIn,
            'pulseoximetry': FeatureDataIn,
            'respiratoryrate': FeatureDataIn,
            'temperature': FeatureDataIn,
            'monocyte': FeatureDataIn,
            'neutrophil': FeatureDataIn,
            'wbc': FeatureDataIn,
            'platelets': FeatureDataIn,
            'albumin': FeatureDataIn,
            'bilirubin': FeatureDataIn,
            'bun': FeatureDataIn,
            'creatinine': FeatureDataIn,
            'glucose': FeatureDataIn,
            'potassium': FeatureDataIn,
            'sodium': FeatureDataIn,
            'lactate': FeatureDataIn,
            'gcstotal': FeatureDataIn,
            'pct': FeatureDataIn,
            'il6': FeatureDataIn,
            'crp': FeatureDataIn
        }

        self.attribute_map = {
            'age': 'age',
            'gender': 'gender',
            'systolicbp': 'systolicbp',
            'diastolicbp': 'diastolicbp',
            'heartrate': 'heartrate',
            'pulseoximetry': 'pulseoximetry',
            'respiratoryrate': 'respiratoryrate',
            'temperature': 'temperature',
            'monocyte': 'monocyte',
            'neutrophil': 'neutrophil',
            'wbc': 'wbc',
            'platelets': 'platelets',
            'albumin': 'albumin',
            'bilirubin': 'bilirubin',
            'bun': 'bun',
            'creatinine': 'creatinine',
            'glucose': 'glucose',
            'potassium': 'potassium',
            'sodium': 'sodium',
            'lactate': 'lactate',
            'gcstotal': 'gcstotal',
            'pct': 'pct',
            'il6': 'il6',
            'crp': 'crp'
        }
        self._age = age
        self._gender = gender
        self._systolicbp = systolicbp
        self._diastolicbp = diastolicbp
        self._heartrate = heartrate
        self._pulseoximetry = pulseoximetry
        self._respiratoryrate = respiratoryrate
        self._temperature = temperature
        self._monocyte = monocyte
        self._neutrophil = neutrophil
        self._wbc = wbc
        self._platelets = platelets
        self._albumin = albumin
        self._bilirubin = bilirubin
        self._bun = bun
        self._creatinine = creatinine
        self._glucose = glucose
        self._potassium = potassium
        self._sodium = sodium
        self._lactate = lactate
        self._gcstotal = gcstotal
        self._pct = pct
        self._il6 = il6
        self._crp = crp

    @classmethod
    def from_dict(cls, dikt) -> 'ImmunomatchEdInputFeatures':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The immunomatch_ed_input_features of this ImmunomatchEdInputFeatures.  # noqa: E501
        :rtype: ImmunomatchEdInputFeatures
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age(self) -> int:
        """Gets the age of this ImmunomatchEdInputFeatures.


        :return: The age of this ImmunomatchEdInputFeatures.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age: int):
        """Sets the age of this ImmunomatchEdInputFeatures.


        :param age: The age of this ImmunomatchEdInputFeatures.
        :type age: int
        """
        if age is None:
            raise ValueError("Invalid value for `age`, must not be `None`")  # noqa: E501

        self._age = age

    @property
    def gender(self) -> str:
        """Gets the gender of this ImmunomatchEdInputFeatures.


        :return: The gender of this ImmunomatchEdInputFeatures.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this ImmunomatchEdInputFeatures.


        :param gender: The gender of this ImmunomatchEdInputFeatures.
        :type gender: str
        """
        allowed_values = ["M", "F"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def systolicbp(self) -> FeatureDataIn:
        """Gets the systolicbp of this ImmunomatchEdInputFeatures.


        :return: The systolicbp of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._systolicbp

    @systolicbp.setter
    def systolicbp(self, systolicbp: FeatureDataIn):
        """Sets the systolicbp of this ImmunomatchEdInputFeatures.


        :param systolicbp: The systolicbp of this ImmunomatchEdInputFeatures.
        :type systolicbp: FeatureDataIn
        """

        self._systolicbp = systolicbp

    @property
    def diastolicbp(self) -> FeatureDataIn:
        """Gets the diastolicbp of this ImmunomatchEdInputFeatures.


        :return: The diastolicbp of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._diastolicbp

    @diastolicbp.setter
    def diastolicbp(self, diastolicbp: FeatureDataIn):
        """Sets the diastolicbp of this ImmunomatchEdInputFeatures.


        :param diastolicbp: The diastolicbp of this ImmunomatchEdInputFeatures.
        :type diastolicbp: FeatureDataIn
        """

        self._diastolicbp = diastolicbp

    @property
    def heartrate(self) -> FeatureDataIn:
        """Gets the heartrate of this ImmunomatchEdInputFeatures.


        :return: The heartrate of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._heartrate

    @heartrate.setter
    def heartrate(self, heartrate: FeatureDataIn):
        """Sets the heartrate of this ImmunomatchEdInputFeatures.


        :param heartrate: The heartrate of this ImmunomatchEdInputFeatures.
        :type heartrate: FeatureDataIn
        """

        self._heartrate = heartrate

    @property
    def pulseoximetry(self) -> FeatureDataIn:
        """Gets the pulseoximetry of this ImmunomatchEdInputFeatures.


        :return: The pulseoximetry of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._pulseoximetry

    @pulseoximetry.setter
    def pulseoximetry(self, pulseoximetry: FeatureDataIn):
        """Sets the pulseoximetry of this ImmunomatchEdInputFeatures.


        :param pulseoximetry: The pulseoximetry of this ImmunomatchEdInputFeatures.
        :type pulseoximetry: FeatureDataIn
        """

        self._pulseoximetry = pulseoximetry

    @property
    def respiratoryrate(self) -> FeatureDataIn:
        """Gets the respiratoryrate of this ImmunomatchEdInputFeatures.


        :return: The respiratoryrate of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._respiratoryrate

    @respiratoryrate.setter
    def respiratoryrate(self, respiratoryrate: FeatureDataIn):
        """Sets the respiratoryrate of this ImmunomatchEdInputFeatures.


        :param respiratoryrate: The respiratoryrate of this ImmunomatchEdInputFeatures.
        :type respiratoryrate: FeatureDataIn
        """

        self._respiratoryrate = respiratoryrate

    @property
    def temperature(self) -> FeatureDataIn:
        """Gets the temperature of this ImmunomatchEdInputFeatures.


        :return: The temperature of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: FeatureDataIn):
        """Sets the temperature of this ImmunomatchEdInputFeatures.


        :param temperature: The temperature of this ImmunomatchEdInputFeatures.
        :type temperature: FeatureDataIn
        """

        self._temperature = temperature

    @property
    def monocyte(self) -> FeatureDataIn:
        """Gets the monocyte of this ImmunomatchEdInputFeatures.


        :return: The monocyte of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._monocyte

    @monocyte.setter
    def monocyte(self, monocyte: FeatureDataIn):
        """Sets the monocyte of this ImmunomatchEdInputFeatures.


        :param monocyte: The monocyte of this ImmunomatchEdInputFeatures.
        :type monocyte: FeatureDataIn
        """

        self._monocyte = monocyte

    @property
    def neutrophil(self) -> FeatureDataIn:
        """Gets the neutrophil of this ImmunomatchEdInputFeatures.


        :return: The neutrophil of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._neutrophil

    @neutrophil.setter
    def neutrophil(self, neutrophil: FeatureDataIn):
        """Sets the neutrophil of this ImmunomatchEdInputFeatures.


        :param neutrophil: The neutrophil of this ImmunomatchEdInputFeatures.
        :type neutrophil: FeatureDataIn
        """

        self._neutrophil = neutrophil

    @property
    def wbc(self) -> FeatureDataIn:
        """Gets the wbc of this ImmunomatchEdInputFeatures.


        :return: The wbc of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._wbc

    @wbc.setter
    def wbc(self, wbc: FeatureDataIn):
        """Sets the wbc of this ImmunomatchEdInputFeatures.


        :param wbc: The wbc of this ImmunomatchEdInputFeatures.
        :type wbc: FeatureDataIn
        """

        self._wbc = wbc

    @property
    def platelets(self) -> FeatureDataIn:
        """Gets the platelets of this ImmunomatchEdInputFeatures.


        :return: The platelets of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._platelets

    @platelets.setter
    def platelets(self, platelets: FeatureDataIn):
        """Sets the platelets of this ImmunomatchEdInputFeatures.


        :param platelets: The platelets of this ImmunomatchEdInputFeatures.
        :type platelets: FeatureDataIn
        """

        self._platelets = platelets

    @property
    def albumin(self) -> FeatureDataIn:
        """Gets the albumin of this ImmunomatchEdInputFeatures.


        :return: The albumin of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._albumin

    @albumin.setter
    def albumin(self, albumin: FeatureDataIn):
        """Sets the albumin of this ImmunomatchEdInputFeatures.


        :param albumin: The albumin of this ImmunomatchEdInputFeatures.
        :type albumin: FeatureDataIn
        """

        self._albumin = albumin

    @property
    def bilirubin(self) -> FeatureDataIn:
        """Gets the bilirubin of this ImmunomatchEdInputFeatures.


        :return: The bilirubin of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._bilirubin

    @bilirubin.setter
    def bilirubin(self, bilirubin: FeatureDataIn):
        """Sets the bilirubin of this ImmunomatchEdInputFeatures.


        :param bilirubin: The bilirubin of this ImmunomatchEdInputFeatures.
        :type bilirubin: FeatureDataIn
        """

        self._bilirubin = bilirubin

    @property
    def bun(self) -> FeatureDataIn:
        """Gets the bun of this ImmunomatchEdInputFeatures.


        :return: The bun of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._bun

    @bun.setter
    def bun(self, bun: FeatureDataIn):
        """Sets the bun of this ImmunomatchEdInputFeatures.


        :param bun: The bun of this ImmunomatchEdInputFeatures.
        :type bun: FeatureDataIn
        """

        self._bun = bun

    @property
    def creatinine(self) -> FeatureDataIn:
        """Gets the creatinine of this ImmunomatchEdInputFeatures.


        :return: The creatinine of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._creatinine

    @creatinine.setter
    def creatinine(self, creatinine: FeatureDataIn):
        """Sets the creatinine of this ImmunomatchEdInputFeatures.


        :param creatinine: The creatinine of this ImmunomatchEdInputFeatures.
        :type creatinine: FeatureDataIn
        """

        self._creatinine = creatinine

    @property
    def glucose(self) -> FeatureDataIn:
        """Gets the glucose of this ImmunomatchEdInputFeatures.


        :return: The glucose of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._glucose

    @glucose.setter
    def glucose(self, glucose: FeatureDataIn):
        """Sets the glucose of this ImmunomatchEdInputFeatures.


        :param glucose: The glucose of this ImmunomatchEdInputFeatures.
        :type glucose: FeatureDataIn
        """

        self._glucose = glucose

    @property
    def potassium(self) -> FeatureDataIn:
        """Gets the potassium of this ImmunomatchEdInputFeatures.


        :return: The potassium of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._potassium

    @potassium.setter
    def potassium(self, potassium: FeatureDataIn):
        """Sets the potassium of this ImmunomatchEdInputFeatures.


        :param potassium: The potassium of this ImmunomatchEdInputFeatures.
        :type potassium: FeatureDataIn
        """

        self._potassium = potassium

    @property
    def sodium(self) -> FeatureDataIn:
        """Gets the sodium of this ImmunomatchEdInputFeatures.


        :return: The sodium of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._sodium

    @sodium.setter
    def sodium(self, sodium: FeatureDataIn):
        """Sets the sodium of this ImmunomatchEdInputFeatures.


        :param sodium: The sodium of this ImmunomatchEdInputFeatures.
        :type sodium: FeatureDataIn
        """

        self._sodium = sodium

    @property
    def lactate(self) -> FeatureDataIn:
        """Gets the lactate of this ImmunomatchEdInputFeatures.


        :return: The lactate of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._lactate

    @lactate.setter
    def lactate(self, lactate: FeatureDataIn):
        """Sets the lactate of this ImmunomatchEdInputFeatures.


        :param lactate: The lactate of this ImmunomatchEdInputFeatures.
        :type lactate: FeatureDataIn
        """

        self._lactate = lactate

    @property
    def gcstotal(self) -> FeatureDataIn:
        """Gets the gcstotal of this ImmunomatchEdInputFeatures.


        :return: The gcstotal of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._gcstotal

    @gcstotal.setter
    def gcstotal(self, gcstotal: FeatureDataIn):
        """Sets the gcstotal of this ImmunomatchEdInputFeatures.


        :param gcstotal: The gcstotal of this ImmunomatchEdInputFeatures.
        :type gcstotal: FeatureDataIn
        """

        self._gcstotal = gcstotal

    @property
    def pct(self) -> FeatureDataIn:
        """Gets the pct of this ImmunomatchEdInputFeatures.


        :return: The pct of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._pct

    @pct.setter
    def pct(self, pct: FeatureDataIn):
        """Sets the pct of this ImmunomatchEdInputFeatures.


        :param pct: The pct of this ImmunomatchEdInputFeatures.
        :type pct: FeatureDataIn
        """

        self._pct = pct

    @property
    def il6(self) -> FeatureDataIn:
        """Gets the il6 of this ImmunomatchEdInputFeatures.


        :return: The il6 of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._il6

    @il6.setter
    def il6(self, il6: FeatureDataIn):
        """Sets the il6 of this ImmunomatchEdInputFeatures.


        :param il6: The il6 of this ImmunomatchEdInputFeatures.
        :type il6: FeatureDataIn
        """

        self._il6 = il6

    @property
    def crp(self) -> FeatureDataIn:
        """Gets the crp of this ImmunomatchEdInputFeatures.


        :return: The crp of this ImmunomatchEdInputFeatures.
        :rtype: FeatureDataIn
        """
        return self._crp

    @crp.setter
    def crp(self, crp: FeatureDataIn):
        """Sets the crp of this ImmunomatchEdInputFeatures.


        :param crp: The crp of this ImmunomatchEdInputFeatures.
        :type crp: FeatureDataIn
        """

        self._crp = crp
