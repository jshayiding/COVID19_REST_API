# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from imm_server.models.base_model_ import Model
from imm_server import util


class Version(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, mayor: float=None, minor: float=None, patch: float=None):  # noqa: E501
        """Version - a model defined in Swagger

        :param name: The name of this Version.  # noqa: E501
        :type name: str
        :param mayor: The mayor of this Version.  # noqa: E501
        :type mayor: float
        :param minor: The minor of this Version.  # noqa: E501
        :type minor: float
        :param patch: The patch of this Version.  # noqa: E501
        :type patch: float
        """
        self.swagger_types = {
            'name': str,
            'mayor': float,
            'minor': float,
            'patch': float
        }

        self.attribute_map = {
            'name': 'name',
            'mayor': 'mayor',
            'minor': 'minor',
            'patch': 'patch'
        }
        self._name = name
        self._mayor = mayor
        self._minor = minor
        self._patch = patch

    @classmethod
    def from_dict(cls, dikt) -> 'Version':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The version of this Version.  # noqa: E501
        :rtype: Version
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Version.


        :return: The name of this Version.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Version.


        :param name: The name of this Version.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def mayor(self) -> float:
        """Gets the mayor of this Version.


        :return: The mayor of this Version.
        :rtype: float
        """
        return self._mayor

    @mayor.setter
    def mayor(self, mayor: float):
        """Sets the mayor of this Version.


        :param mayor: The mayor of this Version.
        :type mayor: float
        """
        if mayor is None:
            raise ValueError("Invalid value for `mayor`, must not be `None`")  # noqa: E501

        self._mayor = mayor

    @property
    def minor(self) -> float:
        """Gets the minor of this Version.


        :return: The minor of this Version.
        :rtype: float
        """
        return self._minor

    @minor.setter
    def minor(self, minor: float):
        """Sets the minor of this Version.


        :param minor: The minor of this Version.
        :type minor: float
        """
        if minor is None:
            raise ValueError("Invalid value for `minor`, must not be `None`")  # noqa: E501

        self._minor = minor

    @property
    def patch(self) -> float:
        """Gets the patch of this Version.


        :return: The patch of this Version.
        :rtype: float
        """
        return self._patch

    @patch.setter
    def patch(self, patch: float):
        """Sets the patch of this Version.


        :param patch: The patch of this Version.
        :type patch: float
        """
        if patch is None:
            raise ValueError("Invalid value for `patch`, must not be `None`")  # noqa: E501

        self._patch = patch
