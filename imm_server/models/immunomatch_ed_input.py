# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from imm_server.models.base_model_ import Model
from imm_server.models.immunomatch_ed_input_features import ImmunomatchEdInputFeatures  # noqa: F401,E501
from imm_server import util


class ImmunomatchEdInput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, version: str=None, patient: str=None, organization: str=None, time: datetime=None, features: ImmunomatchEdInputFeatures=None):  # noqa: E501
        """ImmunomatchEdInput - a model defined in Swagger

        :param version: The version of this ImmunomatchEdInput.  # noqa: E501
        :type version: integer
        :param patient: The patient of this ImmunomatchEdInput.  # noqa: E501
        :type patient: str
        :param organization: The organization of this ImmunomatchEdInput.  # noqa: E501
        :type organization: str
        :param time: The time of this ImmunomatchEdInput.  # noqa: E501
        :type time: date
        :param features: The features of this ImmunomatchEdInput.  # noqa: E501
        :type features: ImmunomatchEdInputFeatures
        """
        self.swagger_types = {
            'version': str,
            'patient': str,
            'organization': str,
            'time': date,
            'features': ImmunomatchEdInputFeatures
        }

        self.attribute_map = {
            'version': 'version',
            'patient': 'patient',
            'organization': 'organization',
            'time': 'time',
            'features': 'features'
        }
        self._version = version
        self._patient = patient
        self._organization = organization
        self._time = time
        self._features = features

    @classmethod
    def from_dict(cls, dikt) -> 'ImmunomatchEdInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The immunomatch_ed_input of this ImmunomatchEdInput.  # noqa: E501
        :rtype: ImmunomatchEdInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version(self) -> str:
        """Gets the version of this ImmunomatchEdInput.


        :return: The version of this ImmunomatchEdInput.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this ImmunomatchEdInput.


        :param version: The version of this ImmunomatchEdInput.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def patient(self) -> str:
        """Gets the patient of this ImmunomatchEdInput.


        :return: The patient of this ImmunomatchEdInput.
        :rtype: str
        """
        return self._patient

    @patient.setter
    def patient(self, patient: str):
        """Sets the patient of this ImmunomatchEdInput.


        :param patient: The patient of this ImmunomatchEdInput.
        :type patient: str
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")  # noqa: E501

        self._patient = patient

    @property
    def organization(self) -> str:
        """Gets the organization of this ImmunomatchEdInput.


        :return: The organization of this ImmunomatchEdInput.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization: str):
        """Sets the organization of this ImmunomatchEdInput.


        :param organization: The organization of this ImmunomatchEdInput.
        :type organization: str
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def time(self) -> datetime:
        """Gets the time of this ImmunomatchEdInput.


        :return: The time of this ImmunomatchEdInput.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time: datetime):
        """Sets the time of this ImmunomatchEdInput.


        :param time: The time of this ImmunomatchEdInput.
        :type time: datetime
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def features(self) -> ImmunomatchEdInputFeatures:
        """Gets the features of this ImmunomatchEdInput.


        :return: The features of this ImmunomatchEdInput.
        :rtype: ImmunomatchEdInputFeatures
        """
        return self._features

    @features.setter
    def features(self, features: ImmunomatchEdInputFeatures):
        """Sets the features of this ImmunomatchEdInput.


        :param features: The features of this ImmunomatchEdInput.
        :type features: ImmunomatchEdInputFeatures
        """
        if features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")  # noqa: E501

        self._features = features
